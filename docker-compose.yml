version: "3"
services:
  nosql-db:
    image: mvertes/alpine-mongo
    ports:
      - "27018:27017"
    container_name: nosql-db
    volumes:
      - ./db/:/data/db
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:alpine
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'  # Management UI
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  products:
    build:
      dockerfile: Dockerfile
      context: ./products
    container_name: products
    ports:
      - "8002:8002"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      nosql-db:
        condition: service_started
    environment:
      - NODE_ENV=dev
      - MESSAGE_BROKER_URL=amqp://rabbitmq:5672
    volumes:
      - ./products:/app/products
      - /app/products/node_modules
      - ./logs/products:/app/products/logs
    env_file:
      - ./products/.env.dev
    networks:
      - app-network

  shopping:
    build:
      dockerfile: Dockerfile
      context: ./shopping
    container_name: shopping
    ports:
      - "8003:8003"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      nosql-db:
        condition: service_started
    volumes:
      - .:/app
      - /app/shopping/node_modules
      - ./logs/shopping:/app/shopping/logs
    env_file:
      - ./shopping/.env.dev
    networks:
      - app-network

  customer:
    build:
      dockerfile: Dockerfile
      context: ./customer
    container_name: customer
    ports:
      - "8001:8001"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      nosql-db:
        condition: service_started
    volumes:
      - ./customer:/app/customer
      - /app/customer/node_modules
      - ./logs/customer:/app/customer/logs
    env_file:
      - ./customer/.env.dev
    networks:
      - app-network

  tenant:
    build:
      dockerfile: Dockerfile
      context: ./tenant
    container_name: tenant
    ports:
      - "8004:8004"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      nosql-db:
        condition: service_started
    volumes:
      - ./tenant:/app/tenant
      - /app/tenant/node_modules
      - ./logs/tenant:/app/tenant/logs
    env_file:
      - ./tenant/.env.dev
    networks:
      - app-network

  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./proxy
    depends_on:
      - products
      - shopping
      - customer
      - tenant
    ports:
      - 80:80
    networks:
      - app-network

  gateway:
    build:
      dockerfile: Dockerfile
      context: ./gateway
    container_name: gateway
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      - "products"
      - "shopping"
      - "customer"
      - "tenant"
    volumes:
      - .:/app
      - /app/gateway/node_modules
      - ./logs/gateway:/app/gateway/logs
    env_file:
      - ./gateway/.env.dev
    networks:
      - app-network

  admin:
    build:
      dockerfile: Dockerfile
      context: ./admin
    container_name: admin
    ports:
      - "8005:8005"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      nosql-db:
        condition: service_started
    volumes:
      - .:/app
      - /app/admin/node_modules
      - ./logs/admin:/app/admin/logs
    env_file:
      - ./admin/.env.dev
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
